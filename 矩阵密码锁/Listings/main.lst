C51 COMPILER V9.54   MAIN                                                                  10/02/2025 16:54:56 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\keil\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main.ls
                    -t) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <reg52.h>
   2          #include "lcd1602.h"
   3          #include "matrixkey.h"
   4          
   5          // 密码相关定义
   6          #define PASSWORD_LENGTH 4
   7          #define MAX_ATTEMPTS 3
   8          
   9          // 密码状态
  10          unsigned char g_password[PASSWORD_LENGTH] = {0, 0, 0, 0};  // 当前输入密码
  11          unsigned char g_input_count = 0;                           // 输入位数计数
  12          unsigned char g_attempts = 0;                              // 尝试次数
  13          
  14          // 正确密码 (4672)
  15          const unsigned char g_correct_password[PASSWORD_LENGTH] = {4, 6, 7, 2};
  16          
  17          // 函数声明
  18          void System_Init(void);
  19          void Display_Password(void);
  20          void Process_Number_Key(unsigned char key_num);
  21          void Process_Enter_Key(void);
  22          void Process_Cancel_Key(void);
  23          void Clear_Password(void);
  24          void Show_Result(unsigned char is_correct);
  25          
  26          /**
  27           * @brief 系统初始化
  28           */
  29          void System_Init(void)
  30          {
  31   1          // 外设初始化
  32   1          LCD_Init();
  33   1          MatrixKey_Init();
  34   1          
  35   1          // 状态初始化
  36   1          Clear_Password();
  37   1          g_attempts = 0;
  38   1          
  39   1          // 显示初始界面
  40   1          LCD_ShowString(0, 0, "Password Lock:");
  41   1          Display_Password();
  42   1      }
  43          
  44          /**
  45           * @brief 显示当前密码
  46           */
  47          void Display_Password(void)
  48          {
  49   1          LCD_ShowNum(1, 0, g_password[0], 1);
  50   1          LCD_ShowNum(1, 1, g_password[1], 1);
  51   1          LCD_ShowNum(1, 2, g_password[2], 1);
  52   1          LCD_ShowNum(1, 3, g_password[3], 1);
  53   1      }
  54          
C51 COMPILER V9.54   MAIN                                                                  10/02/2025 16:54:56 PAGE 2   

  55          /**
  56           * @brief 处理数字按键
  57           * @param key_num 按键数值 (0-9)
  58           */
  59          void Process_Number_Key(unsigned char key_num)
  60          {
  61   1          // 如果已经输入了4位，先清除重新输入
  62   1          if(g_input_count >= PASSWORD_LENGTH)
  63   1          {
  64   2              Clear_Password();
  65   2          }
  66   1          
  67   1          // 存储数字并更新显示
  68   1          g_password[g_input_count] = key_num;
  69   1          g_input_count++;
  70   1          
  71   1          Display_Password();
  72   1      }
  73          
  74          /**
  75           * @brief 处理确认键
  76           */
  77          void Process_Enter_Key(void)
  78          {
  79   1          unsigned char i;
  80   1          unsigned char is_correct = 1;
  81   1          
  82   1          // 检查是否输入了完整的4位密码
  83   1          if(g_input_count != PASSWORD_LENGTH)
  84   1          {
  85   2              LCD_ShowString(1, 5, "Input 4 digits!");
  86   2              return;
  87   2          }
  88   1          
  89   1          // 比较密码
  90   1          for(i = 0; i < PASSWORD_LENGTH; i++)
  91   1          {
  92   2              if(g_password[i] != g_correct_password[i])
  93   2              {
  94   3                  is_correct = 0;
  95   3                  break;
  96   3              }
  97   2          }
  98   1          
  99   1          // 显示结果
 100   1          Show_Result(is_correct);
 101   1          
 102   1          // 更新尝试次数
 103   1          if(is_correct)
 104   1          {
 105   2              g_attempts = 0; // 成功时重置尝试次数
 106   2          }
 107   1          else
 108   1          {
 109   2              g_attempts++;
 110   2              if(g_attempts >= MAX_ATTEMPTS)
 111   2              {
 112   3                  LCD_ShowString(0, 0, "Too many errors!");
 113   3                  LCD_ShowString(1, 0, "System locked!  ");
 114   3                  while(1); // 系统锁定
 115   3              }
 116   2          }
C51 COMPILER V9.54   MAIN                                                                  10/02/2025 16:54:56 PAGE 3   

 117   1          
 118   1          // 清除密码准备下一次输入
 119   1          Clear_Password();
 120   1          Display_Password();
 121   1      }
 122          
 123          /**
 124           * @brief 处理取消键
 125           */
 126          void Process_Cancel_Key(void)
 127          {
 128   1          Clear_Password();
 129   1          Display_Password();
 130   1          LCD_ShowString(1, 5, "Canceled!     ");
 131   1      }
 132          
 133          /**
 134           * @brief 清除密码
 135           */
 136          void Clear_Password(void)
 137          {
 138   1          unsigned char i;
 139   1          for(i = 0; i < PASSWORD_LENGTH; i++)
 140   1          {
 141   2              g_password[i] = 0;
 142   2          }
 143   1          g_input_count = 0;
 144   1      }
 145          
 146          /**
 147           * @brief 显示验证结果
 148           * @param is_correct 密码是否正确
 149           */
 150          void Show_Result(unsigned char is_correct)
 151          {
 152   1          if(is_correct)
 153   1          {
 154   2              LCD_ShowString(1, 5, "OK   ");
 155   2              // 可以在这里添加开锁动作，比如控制继电器等
 156   2          }
 157   1          else
 158   1          {
 159   2              LCD_ShowString(1, 5, "ERR  ");
 160   2              LCD_ShowNum(1, 12, MAX_ATTEMPTS - g_attempts, 1);
 161   2              LCD_ShowChar(1, 13, ' ');
 162   2          }
 163   1      }
 164          
 165          /**
 166           * @brief 主函数
 167           */
 168          void main()
 169          {
 170   1          unsigned char key_value;
 171   1          
 172   1          // 系统初始化
 173   1          System_Init();
 174   1          
 175   1          while(1)
 176   1          {
 177   2              // 处理按键
 178   2              MatrixKey_ProcessKey();
C51 COMPILER V9.54   MAIN                                                                  10/02/2025 16:54:56 PAGE 4   

 179   2              key_value = MatrixKey_GetDisplayValue();
 180   2              
 181   2              if(key_value != 0)
 182   2              {
 183   3                  // 根据按键值进行处理
 184   3                  if(key_value >= 1 && key_value <= 10)
 185   3                  {
 186   4                      // 数字键 S1-S10
 187   4                      // S1=1, S2=2, ..., S9=9, S10=0
 188   4                      unsigned char number;
 189   4                      if(key_value == 10)
 190   4                          number = 0;  // S10 对应数字 0
 191   4                      else
 192   4                          number = key_value;  // S1-S9 对应数字 1-9
 193   4                          
 194   4                      Process_Number_Key(number);
 195   4                  }
 196   3                  else if(key_value == 11)
 197   3                  {
 198   4                      // 确认键 S11
 199   4                      Process_Enter_Key();
 200   4                  }
 201   3                  else if(key_value == 12)
 202   3                  {
 203   4                      // 取消键 S12
 204   4                      Process_Cancel_Key();
 205   4                  }
 206   3                  else
 207   3                  {
 208   4                      // S13-S16 未定义，可以忽略或添加其他功能
 209   4                      LCD_ShowString(1, 5, "Invalid key! ");
 210   4                  }
 211   3              }
 212   2             
 213   2          }
 214   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    385    ----
   CONSTANT SIZE    =    106    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     10       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
